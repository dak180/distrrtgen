# freerainbowtables is a project for generating, distributing, and using
# perfect rainbow tables
#
# Copyright (C) Zhu Shuanglei <shuanglei@hotmail.com>
# Copyright 2010 Martin Westergaard Jørgensen <martinwj2005@gmail.com>
# Copyright 2009, 2010 Daniël Niggebrugge <niggebrugge@fox-it.com>
# Copyright 2009, 2010 James Nobis <frt@quelrod.net>
#
# This file is part of freerainbowtables.
#
# freerainbowtables is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# freerainbowtables is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with freerainbowtables.  If not, see <http://www.gnu.org/licenses/>.

SHELL = /bin/sh

#BOINC_DIR = /home/ubuntu/boinc
BOINC_DIR = /usr/share/boinc-dev
BOINC_API_DIR = $(BOINC_DIR)/api
BOINC_LIB_DIR = $(BOINC_DIR)/lib
CC = g++
COMMON_LIB_DIR = /usr/lib
# ending for libcudart
CUDA_LIB = so.2
#CUDA_LIB = so.3
CUDA_PATH = /usr/local/cuda
CUDA_VERSION = cuda__23
#CUDA_VERSION = cuda__30
#CUDA_VERSION = cuda__32
PLATFORM = i686-pc-linux-gnu
VERSION = 3.11
INCLUDES = -I../../../Common/rt\ api -I$(BOINC_DIR) -I$(BOINC_LIB_DIR) \
	-I$(BOINC_API_DIR) -I$(CUDA_PATH)/include
COMMON_API_PATH = ../../../Common/rt\ api

OPTIMIZATION = -O3
WARNALL = -Wextra -Wunused-macros -Wunsafe-loop-optimizations -Wundef \
	-Woverlength-strings -Wdisabled-optimization -Wformat-extra-args \
	-Wformat-security -Winline

CXXFLAGS = -Wall -static -static-libgcc -ansi -c -DBOINC $(INCLUDES) \
	$(OPTIMIZATION) $(DEBUG)

# -static
LFLAGS = -Wall -static-libgcc -ansi $(INCLUDES) $(OPTIMIZATION) \
	-L$(BOINC_API_DIR) -L$(BOINC_LIB_DIR) -L/usr/X11R6/lib -L/usr/lib \
	-L$(CUDA_PATH)/lib -L. -Xlinker -rpath . $(DEBUG)

LIBS = -lboinc_api -lboinc -lpthread -lcudart \
	libcudart.$(CUDA_LIB)=libcudart_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).$(CUDA_LIB) \
	libgcc_s.so.1=libgcc_s_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).so.1 \
	libstdc++.so.6=libstdc++_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).so.6 \
	$(COMMON_LIB_DIR)/libpthread.a
OBJS = ChainWalkContext.o des_enc.o des_setkey.o distrrtgen.o ecb_enc.o \
	HashAlgorithm.o HashRoutine.o md4.o md5.o Public.o rcuda_ext.o rcuda.o

OSNAME = $(shell uname -s)

all: distrrtgen

distrrtgen: libcudart_$(PLATFORM).$(CUDA_LIB) \
	libgcc_s_$(PLATFORM).so.1 libstdc++_$(PLATFORM).so.6 \
	$(BOINC_API_DIR)/libboinc_api.a $(BOINC_LIB_DIR)/libboinc.a $(OBJS)
	$(CXX) $(LFLAGS) $(OBJS) $(LIBS) -o distrrtgen

libcudart_$(PLATFORM).$(CUDA_LIB):
	ln -s $(CUDA_PATH)/lib/libcudart.$(CUDA_LIB) \
		libcudart.$(CUDA_LIB)=libcudart_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).$(CUDA_LIB)
	echo -n "<copy_file/>" > libcudart.$(CUDA_LIB)=libcudart_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).$(CUDA_LIB).file_ref_info

libstdc++_$(PLATFORM).so.6:
	ln -s `$(CC) $(CXXFLAGS) -print-file-name=libstdc++.so.6` \
		libstdc++.so.6=libstdc++_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).so.6
	echo -n "<copy_file/>" > libstdc++.so.6=libstdc++_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).so.6.file_ref_info

libgcc_s_$(PLATFORM).so.1:
	ln -s `$(CC) $(CXXFLAGS) -print-file-name=libgcc_s.so.1` \
		libgcc_s.so.1=libgcc_s_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).so.1
	echo -n "<copy_file/>" > libgcc_s.so.1=libgcc_s_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).so.1.file_ref_info

clean:
	/bin/rm -f distrrtgen *.o

debug: DEBUG += -DDEBUG -g
debug: all

debugall: DEBUG += -DDEBUG -g $(WARNALL)
debugall: all

distclean:
	/bin/rm -f distrrtgen *.o \
		libgcc_s.so.1=libgcc_s_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).so.1 \
		libstdc++.so.6=libstdc++_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).so.6 \
		libcudart.$(CUDA_LIB)=libcudart_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).$(CUDA_LIB) \
		libgcc_s.so.1=libgcc_s_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).so.1.file_ref_info \
		libstdc++.so.6=libstdc++_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).so.6.file_ref_info \
		libcudart.$(CUDA_LIB)=libcudart_$(VERSION)_$(PLATFORM)_$(CUDA_VERSION).$(CUDA_LIB).file_ref_info

rebuild: clean all

ChainWalkContext.o: $(COMMON_API_PATH)/ChainWalkContext.h $(COMMON_API_PATH)/ChainWalkContext.cpp $(COMMON_API_PATH)/HashRoutine.h $(COMMON_API_PATH)/Public.h
	$(CXX) $(CXXFLAGS) $(COMMON_API_PATH)/ChainWalkContext.cpp

des_enc.o: $(COMMON_API_PATH)/des_enc.c $(COMMON_API_PATH)/des_locl.h $(COMMON_API_PATH)/spr.h
	$(CXX) $(CXXFLAGS) $(COMMON_API_PATH)/des_enc.c

des_setkey.o: $(COMMON_API_PATH)/des_setkey.c $(COMMON_API_PATH)/des_locl.h $(COMMON_API_PATH)/podd.h $(COMMON_API_PATH)/sk.h
	$(CXX) $(CXXFLAGS) $(COMMON_API_PATH)/des_setkey.c

distrrtgen.o: distrrtgen.cpp distrrtgen.h $(COMMON_API_PATH)/ChainWalkContext.h $(COMMON_API_PATH)/Public.h
	$(CXX) $(CXXFLAGS) distrrtgen.cpp

ecb_enc.o: $(COMMON_API_PATH)/ecb_enc.c $(COMMON_API_PATH)/des_locl.h $(COMMON_API_PATH)/spr.h
	$(CXX) $(CXXFLAGS) $(COMMON_API_PATH)/ecb_enc.c

HashAlgorithm.o: $(COMMON_API_PATH)/HashAlgorithm.h $(COMMON_API_PATH)/HashAlgorithm.cpp $(COMMON_API_PATH)/Public.h $(COMMON_API_PATH)/md4.h 
	$(CXX) $(CXXFLAGS) $(COMMON_API_PATH)/HashAlgorithm.cpp

HashRoutine.o: $(COMMON_API_PATH)/HashRoutine.h $(COMMON_API_PATH)/HashRoutine.cpp $(COMMON_API_PATH)/global.h $(COMMON_API_PATH)/HashAlgorithm.h
	$(CXX) $(CXXFLAGS) $(COMMON_API_PATH)/HashRoutine.cpp

md4.o: $(COMMON_API_PATH)/md4.h $(COMMON_API_PATH)/md4.cpp $(COMMON_API_PATH)/global.h
	$(CXX) $(CXXFLAGS) $(COMMON_API_PATH)/md4.cpp

md5.o: $(COMMON_API_PATH)/md5.h $(COMMON_API_PATH)/md5.cpp $(COMMON_API_PATH)/global.h
	$(CXX) $(CXXFLAGS) $(COMMON_API_PATH)/md5.cpp

Public.o: $(COMMON_API_PATH)/Public.h $(COMMON_API_PATH)/Public.cpp $(COMMON_API_PATH)/global.h
	$(CXX) $(CXXFLAGS) $(COMMON_API_PATH)/Public.cpp

rcuda_ext.o: rcuda_ext.h rcuda_ext.cpp $(COMMON_API_PATH)/ChainWalkContext.h
	$(CXX) $(CXXFLAGS) rcuda_ext.cpp

rcuda.o: rcuda.h rcuda.cu $(COMMON_API_PATH)/Public.h $(COMMON_API_PATH)/global.h
	$(CUDA_PATH)/bin/nvcc $(OPTIMIZATION) $(DEBUG) --machine 32 -I../../../Common/rt\ api --compile rcuda.cu
#	$(CUDA_PATH)/bin/nvcc -G $(DEBUG) --machine 32 -I../../../Common/rt\ api --compile rcuda.cu
